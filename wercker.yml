box: golang

services:
  - rabbitmq:3-management

build:

  steps:
    - setup-go-workspace
    - wercker/golint:
        exclude: "^vendor\\|fakes"

    - script:
        name: env
        code: env

    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          go get -u github.com/tools/godep
          export PATH=$WERCKER_SOURCE_DIR/bin:$PATH

    # Build the project
    - script:
        name: go build
        code: |
          godep go build

    # Test the project
    - script:
        name: go test
        code: |
          godep go test -v ./plugin/...

    - script:
        name: integration tests
        code: |
          godep go test ./integrations/_test -v -race

    - script:
        name: set release id variable and version
        code: |
          go get github.com/xchapter7x/versioning
          export NEXT_VERSION=`versioning bump_patch`
          echo "next version should be: ${NEXT_VERSION}"

    - script:
        name: cross platform release
        code: |
          (GOOS=linux GOARCH=amd64 go build -ldflags "-X main.VERSION=${NEXT_VERSION}" && mkdir -p ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/linux64 && mv cfops-rabbitmq-plugin ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/linux64)
          (GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.VERSION=${NEXT_VERSION}" && mkdir -p ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/osx && mv cfops-rabbitmq-plugin ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/osx)
          (GOOS=windows GOARCH=amd64 go build -ldflags "-X main.VERSION=${NEXT_VERSION}" && mkdir -p ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/win64 && mv cfops-rabbitmq-plugin.exe ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/win64)

    - script:
        name: create tarball
        code: |
          tar -cvzf cfops-rabbitmq-plugin_binaries.tgz ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/

    - script:
        name: copy files to wercker output
        code: |
          cp -R ./ ${WERCKER_OUTPUT_DIR}

deploy:
  steps:
    - script:
        name: install-packages
        code: |
          sudo apt-get install -y openssh-client wget
          ls -la
          pwd
          echo ${WERCKER_OUTPUT_DIR}
          ls -la ${WERCKER_OUTPUT_DIR}
    - wercker/add-ssh-key@1.0.2:
        keyname: PCF_GITHUB_KEY

    - wercker/add-to-known_hosts@1.4.0:
        hostname: github.com
        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48

    - script:
        name: set release id variable for version
        code: |
          go get github.com/xchapter7x/versioning
          export WERCKER_GITHUB_CREATE_RELEASE_ID=`versioning bump_patch`
    - github-create-release:
        token: $GITHUB_TOKEN
        tag: $WERCKER_GITHUB_CREATE_RELEASE_ID
        title: CFOPS-MYSQL-PLUGIN $WERCKER_GITHUB_CREATE_RELEASE_ID
        draft: $RELEASE_DRAFT

    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: cfops-rabbitmq-plugin_binaries.tgz
        release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID
        content-type: application/x-gzip

    - s3sync:
        key-id: $S3_KEY
        key-secret: $S3_SECRET
        bucket-url: ${S3_BUCKET}/${S3_FOLDER}/linux64/${WERCKER_GITHUB_CREATE_RELEASE_TAG}/
        source-dir: ./${BUILD_DIR}/linux64
        delete-removed: false

    - s3sync:
        key-id: $S3_KEY
        key-secret: $S3_SECRET
        bucket-url: ${S3_BUCKET}/${S3_FOLDER}/osx/${WERCKER_GITHUB_CREATE_RELEASE_TAG}/
        source-dir: ./${BUILD_DIR}/osx
        delete-removed: false

    - s3sync:
        key-id: $S3_KEY
        key-secret: $S3_SECRET
        bucket-url: ${S3_BUCKET}/${S3_FOLDER}/win64/${WERCKER_GITHUB_CREATE_RELEASE_TAG}/
        source-dir: ./${BUILD_DIR}/win64
        delete-removed: false
